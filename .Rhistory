for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
#' Runs all simulations for a single simulation setting.
run_MCMC_allcode <- function(info){
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
source("homelessIPMfunctions.R")
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
runTimes = runModel(folderName, M, currData, nc, nb, ni, nthin, monitors)
return(runTimes)
}
assign('runModel', runModel, envir = .GlobalEnv)
chain_output <- parLapply(cl = this_cluster, X = per_chain_info, fun = run_MCMC_allcode)
knitr::opts_chunk$set(echo = TRUE)
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
homeless.ipm.data.victoria= readRDS("homeless.ipm.data.victoria.RDS")
source("homelessIPMfunctions.R")
homeless_df_ER = homeless.ipm.data.victoria$homeless_df_ER
homeless_df_Other = homeless.ipm.data.victoria$homeless_df_Other
homeless_ages = homeless.ipm.data.victoria$homeless_ages
homeless_gender = homeless.ipm.data.victoria$homeless_gender
homeless_alive = homeless.ipm.data.victoria$homeless_alive
M = 2000
#nimbleData <- formatData(homeless_df_ER, homeless_df_Other, homeless_alive, homeless_ages, homeless_gender, M)
nc <- 1 #Number of chains #need more than 1 to check for convergence
nb <- 0 #Number of burn in iterations, keep at 0
ni <- 5000+nb #Total number of iterations (smaller = faster obviously, but we need to make sure that the chains converge)
nthin <- 1 #Thinning parameter, keep every nthin iterations, keep at 1
monitors <- c("p0","p1","p2","p3", "phi0", "beta", "psi", "Nsuper", "N") #Parameters to monitor
nimParams <- list(nc = nc, nb = nb, ni = ni, nthin = nthin, monitors = monitors)
today = format(Sys.time(), "%Y%m%d")
folderName = paste0(today, "_testrun") #Make sure that every time you run, this is a DIFFERENT folder name so results don't get overwritten
#nCores = detectCores() #16 on matcha, if you know how many cores you want to
nCores = 4
this_cluster <- makeCluster(nCores)
per_chain_info <-  vector('list', nCores)
for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
#' Runs all simulations for a single simulation setting.
run_MCMC_allcode <- function(info){
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
source("homelessIPMfunctions.R")
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
runTimes = runModel(folderName, M, currData, nc, nb, ni, nthin, monitors)
return(runTimes)
}
assign('runModel', runModel, envir = .GlobalEnv)
chain_output <- parLapply(cl = this_cluster, X = per_chain_info, fun = run_MCMC_allcode)
knitr::opts_chunk$set(echo = TRUE)
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
homeless.ipm.data.victoria= readRDS("homeless.ipm.data.victoria.RDS")
source("homelessIPMfunctions.R")
homeless_df_ER = homeless.ipm.data.victoria$homeless_df_ER
homeless_df_Other = homeless.ipm.data.victoria$homeless_df_Other
homeless_ages = homeless.ipm.data.victoria$homeless_ages
homeless_gender = homeless.ipm.data.victoria$homeless_gender
homeless_alive = homeless.ipm.data.victoria$homeless_alive
M = 2000
#nimbleData <- formatData(homeless_df_ER, homeless_df_Other, homeless_alive, homeless_ages, homeless_gender, M)
nc <- 1 #Number of chains #need more than 1 to check for convergence
nb <- 0 #Number of burn in iterations, keep at 0
ni <- 5000+nb #Total number of iterations (smaller = faster obviously, but we need to make sure that the chains converge)
nthin <- 1 #Thinning parameter, keep every nthin iterations, keep at 1
monitors <- c("p0","p1","p2","p3", "phi0", "beta", "psi", "Nsuper", "N") #Parameters to monitor
nimParams <- list(nc = nc, nb = nb, ni = ni, nthin = nthin, monitors = monitors)
today = format(Sys.time(), "%Y%m%d")
folderName = paste0(today, "_testrun") #Make sure that every time you run, this is a DIFFERENT folder name so results don't get overwritten
#nCores = detectCores() #16 on matcha, if you know how many cores you want to
nCores = 4
this_cluster <- makeCluster(nCores)
per_chain_info <-  vector('list', nCores)
for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
#' Runs all simulations for a single simulation setting.
run_MCMC_allcode <- function(info){
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
source("homelessIPMfunctions.R")
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
runTimes = runModel(folderName, M, currData, nc, nb, ni, nthin, monitors)
return(runTimes)
}
assign('runModel', runModel, envir = .GlobalEnv)
chain_output <- parLapply(cl = this_cluster, X = per_chain_info, fun = run_MCMC_allcode)
knitr::opts_chunk$set(echo = TRUE)
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
homeless.ipm.data.victoria= readRDS("homeless.ipm.data.victoria.RDS")
source("homelessIPMfunctions.R")
homeless_df_ER = homeless.ipm.data.victoria$homeless_df_ER
homeless_df_Other = homeless.ipm.data.victoria$homeless_df_Other
homeless_ages = homeless.ipm.data.victoria$homeless_ages
homeless_gender = homeless.ipm.data.victoria$homeless_gender
homeless_alive = homeless.ipm.data.victoria$homeless_alive
M = 2000
#nimbleData <- formatData(homeless_df_ER, homeless_df_Other, homeless_alive, homeless_ages, homeless_gender, M)
nc <- 1 #Number of chains #need more than 1 to check for convergence
nb <- 0 #Number of burn in iterations, keep at 0
ni <- 5000+nb #Total number of iterations (smaller = faster obviously, but we need to make sure that the chains converge)
nthin <- 1 #Thinning parameter, keep every nthin iterations, keep at 1
monitors <- c("p0","p1","p2","p3", "phi0", "beta", "psi", "Nsuper", "N") #Parameters to monitor
nimParams <- list(nc = nc, nb = nb, ni = ni, nthin = nthin, monitors = monitors)
today = format(Sys.time(), "%Y%m%d")
folderName = paste0(today, "_testrun") #Make sure that every time you run, this is a DIFFERENT folder name so results don't get overwritten
#nCores = detectCores() #16 on matcha, if you know how many cores you want to
nCores = 4
this_cluster <- makeCluster(nCores)
per_chain_info <-  vector('list', nCores)
for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
#' Runs all simulations for a single simulation setting.
run_MCMC_allcode <- function(info){
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
source("homelessIPMfunctions.R")
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
runTimes = runModel(folderName, M, currData, nc, nb, ni, nthin, monitors)
return(runTimes)
}
assign('runModel', runModel, envir = .GlobalEnv)
chain_output <- parLapply(cl = this_cluster, X = per_chain_info, fun = run_MCMC_allcode)
knitr::opts_chunk$set(echo = TRUE)
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
homeless.ipm.data.victoria= readRDS("homeless.ipm.data.victoria.RDS")
source("homelessIPMfunctions.R")
homeless_df_ER = homeless.ipm.data.victoria$homeless_df_ER
homeless_df_Other = homeless.ipm.data.victoria$homeless_df_Other
homeless_ages = homeless.ipm.data.victoria$homeless_ages
homeless_gender = homeless.ipm.data.victoria$homeless_gender
homeless_alive = homeless.ipm.data.victoria$homeless_alive
M = 2000
#nimbleData <- formatData(homeless_df_ER, homeless_df_Other, homeless_alive, homeless_ages, homeless_gender, M)
nc <- 1 #Number of chains #need more than 1 to check for convergence
nb <- 0 #Number of burn in iterations, keep at 0
ni <- 5000+nb #Total number of iterations (smaller = faster obviously, but we need to make sure that the chains converge)
nthin <- 1 #Thinning parameter, keep every nthin iterations, keep at 1
monitors <- c("p0","p1","p2","p3", "phi0", "beta", "psi", "Nsuper", "N") #Parameters to monitor
nimParams <- list(nc = nc, nb = nb, ni = ni, nthin = nthin, monitors = monitors)
today = format(Sys.time(), "%Y%m%d")
folderName = paste0(today, "_testrun") #Make sure that every time you run, this is a DIFFERENT folder name so results don't get overwritten
#nCores = detectCores() #16 on matcha, if you know how many cores you want to
nCores = 4
this_cluster <- makeCluster(nCores)
per_chain_info <-  vector('list', nCores)
for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
#' Runs all simulations for a single simulation setting.
run_MCMC_allcode <- function(info){
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
source("homelessIPMfunctions.R")
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
runTimes = runModel(folderName, M, currData, nc, nb, ni, nthin, monitors)
return(runTimes)
}
assign('runModel', runModel, envir = .GlobalEnv)
chain_output <- parLapply(cl = this_cluster, X = per_chain_info, fun = run_MCMC_allcode)
info = per_chain_info[[1]]
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
runTimes = runModel(folderName, M, currData, nc, nb, ni, nthin, monitors)
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
# Nimble steps
Rmodel <- nimbleModel(code=model.pit.t, constants=nimble.constants,
data=data.homeless, calculate=F, check=F, inits=inits)
nimble.constants
inits
data.homeless$
y
data.homeless
inits
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
# Nimble steps
Rmodel <- nimbleModel(code=model.pit.t, constants=nimble.constants,
data=data.homeless, calculate=F, check=F, inits=inits)
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
# Nimble steps
Rmodel <- nimbleModel(code=model.pit.t, constants=nimble.constants,
data=data.homeless, calculate=F, check=F, inits=inits)
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
# Nimble steps
Rmodel <- nimbleModel(code=model.pit.t, constants=nimble.constants,
data=data.homeless, calculate=F, check=F, inits=inits)
knitr::opts_chunk$set(echo = TRUE)
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
homeless.ipm.data.victoria= readRDS("homeless.ipm.data.victoria.RDS")
source("homelessIPMfunctions.R")
homeless_df_ER = homeless.ipm.data.victoria$homeless_df_ER
homeless_df_Other = homeless.ipm.data.victoria$homeless_df_Other
homeless_ages = homeless.ipm.data.victoria$homeless_ages
homeless_gender = homeless.ipm.data.victoria$homeless_gender
homeless_alive = homeless.ipm.data.victoria$homeless_alive
M = 2000
#nimbleData <- formatData(homeless_df_ER, homeless_df_Other, homeless_alive, homeless_ages, homeless_gender, M)
nc <- 1 #Number of chains #need more than 1 to check for convergence
nb <- 0 #Number of burn in iterations, keep at 0
ni <- 5000+nb #Total number of iterations (smaller = faster obviously, but we need to make sure that the chains converge)
nthin <- 1 #Thinning parameter, keep every nthin iterations, keep at 1
monitors <- c("p0","p1","p2","p3", "phi0", "beta", "psi", "Nsuper", "N") #Parameters to monitor
nimParams <- list(nc = nc, nb = nb, ni = ni, nthin = nthin, monitors = monitors)
today = format(Sys.time(), "%Y%m%d")
folderName = paste0(today, "_testrun") #Make sure that every time you run, this is a DIFFERENT folder name so results don't get overwritten
#nCores = detectCores() #16 on matcha, if you know how many cores you want to
nCores = 4
this_cluster <- makeCluster(nCores)
per_chain_info <-  vector('list', nCores)
for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
homeless_alive
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
# Nimble steps
Rmodel <- nimbleModel(code=model.pit.t, constants=nimble.constants,
data=data.homeless, calculate=F, check=F, inits=inits)
Cmodel <- compileNimble(Rmodel)
printErrors()
stopCluster(this_cluster)
stopCluster(this_cluster)
stopCluster(this_cluster)
knitr::opts_chunk$set(echo = TRUE)
library(nimble) #for building the model and running the mcmc
library(basicMCMCplots) #for samplesPlot
library(coda) #for some MCMC functions like mcmc.list and mcmc
library(here) #for getting directory names
library(parallel) #for running in parallel
homeless.ipm.data.victoria= readRDS("homeless.ipm.data.victoria.RDS")
source("homelessIPMfunctions.R")
homeless_df_ER = homeless.ipm.data.victoria$homeless_df_ER
homeless_df_Other = homeless.ipm.data.victoria$homeless_df_Other
homeless_ages = homeless.ipm.data.victoria$homeless_ages
homeless_gender = homeless.ipm.data.victoria$homeless_gender
homeless_alive = homeless.ipm.data.victoria$homeless_alive
M = 2000
#nimbleData <- formatData(homeless_df_ER, homeless_df_Other, homeless_alive, homeless_ages, homeless_gender, M)
nc <- 1 #Number of chains #need more than 1 to check for convergence
nb <- 0 #Number of burn in iterations, keep at 0
ni <- 5000+nb #Total number of iterations (smaller = faster obviously, but we need to make sure that the chains converge)
nthin <- 1 #Thinning parameter, keep every nthin iterations, keep at 1
monitors <- c("p0","p1","p2","p3", "phi0", "beta", "psi", "Nsuper", "N") #Parameters to monitor
nimParams <- list(nc = nc, nb = nb, ni = ni, nthin = nthin, monitors = monitors)
today = format(Sys.time(), "%Y%m%d")
folderName = paste0(today, "_testrun") #Make sure that every time you run, this is a DIFFERENT folder name so results don't get overwritten
#nCores = detectCores() #16 on matcha, if you know how many cores you want to
nCores = 4
this_cluster <- makeCluster(nCores)
per_chain_info <-  vector('list', nCores)
for(i in 1:nCores){
#Alter this line to make things different for each of the nCores runs if needed
per_chain_info[[i]] = list(folderName=paste0(folderName,"_",i,"_of_",nCores), nimParams = nimParams, currData = homeless.ipm.data.victoria, M = M)
}
saveRDS(per_chain_info, paste0(folderName, "_simulationInfo.rds")) #save generating parameters
source("homelessIPMfunctions.R")
info = per_chain_info[[1]]
folderName = info$folderName
currData = info$currData
nc = info$nimParams$nc
nb = info$nimParams$nb
ni = info$nimParams$ni
nthin = info$nimParams$nthin
monitors = info$nimParams$monitors
M = info$M
suppressWarnings(dir.create(here(folderName)))
homeless_df_ER = currData$homeless_df_ER
homeless_df_Other = currData$homeless_df_Other
homeless_ages = currData$homeless_ages
homeless_gender = currData$homeless_gender
homeless_alive = currData$homeless_alive
#Format Data
data.homeless = suppressWarnings(formatData(homeless_df_ER, homeless_df_Other,
homeless_alive, homeless_ages,
homeless_gender, M))
nimConstsInits = createNimbleConstants(data.homeless)
nimble.constants <- nimConstsInits$nimbleConstants
inits <- nimConstsInits$nimbleInits
# Nimble steps
Rmodel <- nimbleModel(code=model.pit.t, constants=nimble.constants,
data=data.homeless, calculate=F, check=F, inits=inits)
Cmodel <- compileNimble(Rmodel)
printErrors()
install.packages('blogdown')
blogdown::serve_site()
blogdown::install_hugo("0.115.4")
blogdown::serve_site()
{{< resume-section title="University of Victoria" >}}
blogdown::serve_site()
